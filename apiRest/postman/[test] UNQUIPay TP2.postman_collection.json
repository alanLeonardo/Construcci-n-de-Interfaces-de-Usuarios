{
	"info": {
		"_postman_id": "4e52ac34-9279-4098-a4e4-a2a67264dad6",
		"name": "[test] UNQUIPay TP2",
		"description": "Bateria de test para el TP2 API RESTful de Digital Wallet. Interfaces de Usuario 2019S2 Grupo 3 UNQUIPay.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST /users",
			"item": [
				{
					"name": "[test] field format",
					"item": [
						{
							"name": "[test] POST /users \"IDCard\" field have only numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f73beb07-6ebe-4c23-a52d-9b1eb9375cd1",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"IDCard field accept only numbers\", function () {",
											"    var handler = pm.response.json();",
											"    pm.expect(handler.message).to.eql(\"Request body as StoreUserAdapter invalid - IDCard field only accept numbers.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"idCard\": \"2+49sdfsjk23\",\n\t\"lastname\": \"Stark\",\n\t\"firstname\": \"Arya\",\n\t\"email\": \"arya_stark@outlook.com\",\n\t\"password\": \"arya123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:7000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "7000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[test] POST /users \"email\" only accept email format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f73beb07-6ebe-4c23-a52d-9b1eb9375cd1",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Email field without email format is invalid\", function () {",
											"    var handler = pm.response.json();",
											"    pm.expect(handler.message).to.eql(\"Request body as StoreUserAdapter invalid - Email field only use an email format (name_surname@email.com).\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"idCard\": \"23492349\",\n\t\"lastname\": \"Stark\",\n\t\"firstname\": \"Arya\",\n\t\"email\": \"arya*starkoutlook/com\",\n\t\"password\": \"arya123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:7000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "7000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[test] POST /users \"password\" can only use alphanumeric characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f73beb07-6ebe-4c23-a52d-9b1eb9375cd1",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Password field accepts only alphanumeric characters\", function () {",
											"    var handler = pm.response.json();",
											"    pm.expect(handler.message).to.eql(\"Request body as StoreUserAdapter invalid - Password field only use alphanumeric characters.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"idCard\": \"23492349\",\n\t\"lastname\": \"Stark\",\n\t\"firstname\": \"Arya\",\n\t\"email\": \"arya_stark@outlook.com\",\n\t\"password\": \"arya/*/=-123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:7000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "7000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[test] POST /users \"firstname\" field has only letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f73beb07-6ebe-4c23-a52d-9b1eb9375cd1",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Firstname field has only letters\", function () {",
											"    var handler = pm.response.json();",
											"    pm.expect(handler.message).to.eql(\"Request body as StoreUserAdapter invalid - Firstname field only accept letters.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"idCard\": \"23492349\",\n\t\"lastname\": \"Stark\",\n\t\"firstname\": \"Ar4354-+ya\",\n\t\"email\": \"arya_stark@outlook.com\",\n\t\"password\": \"arya123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:7000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "7000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[test] POST /users \"lastname\" field has only letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f73beb07-6ebe-4c23-a52d-9b1eb9375cd1",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Lastname field has only letters\", function () {",
											"    var handler = pm.response.json();",
											"    pm.expect(handler.message).to.eql(\"Request body as StoreUserAdapter invalid - Lastname field only accept letters.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"idCard\": \"23492349\",\n\t\"lastname\": \"Star3453/*/k\",\n\t\"firstname\": \"Arya\",\n\t\"email\": \"arya_stark@outlook.com\",\n\t\"password\": \"arya123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:7000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "7000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "POST /cashin",
			"item": [
				{
					"name": "[test] field format",
					"item": [
						{
							"name": "[test] POST /cashin amount must be greater than zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2b289f5-a818-4640-87a6-0933caf8c0b3",
										"exec": [
											"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Amount must be greater than zero\", function () {",
											"    var badRequestHandler = pm.response.json();",
											"    pm.expect(badRequestHandler.message).to.eql(\"Request body as CashInUserAdapter invalid - Amount can't be zero or negative.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"fromCVU\": \"806122948\",\n\t\"amount\" : 0.00,\n\t\"cardNumber\":\"1234 1234 1234 1234\",\n\t\"fullName\":\"Arya Stark\",\n\t\"endDate\":\"07/2019\",\n\t\"securityCode\": \"123\",\n\t\"isCreditCard\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:7000/cashin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "7000",
									"path": [
										"cashin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[test] POST /cashin full name must be composed by only letters and spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2b289f5-a818-4640-87a6-0933caf8c0b3",
										"exec": [
											"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Fullname must be composed by only letters and spaces\", function () {",
											"    var badRequestHandler = pm.response.json();",
											"    pm.expect(badRequestHandler.message).to.eql(\"Request body as CashInUserAdapter invalid - FullName field only accept letters and spaces.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"fromCVU\": \"806122948\",\n\t\"amount\" : 100.00,\n\t\"cardNumber\":\"1234 1234 1234 1234\",\n\t\"fullName\":\"AryaStark12\",\n\t\"endDate\":\"07/2019\",\n\t\"securityCode\": \"123\",\n\t\"isCreditCard\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:7000/cashin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "7000",
									"path": [
										"cashin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[test] POST /cashin isCreditCard must be only credit or debit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2b289f5-a818-4640-87a6-0933caf8c0b3",
										"exec": [
											"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var badRequestHandler = pm.response.json();",
											"    pm.expect(badRequestHandler.message).to.eql(\"Request body as CashInUserAdapter invalid - IsCreditCard field only accept credit or debit.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"fromCVU\": \"806122948\",\n\t\"amount\" : 100.00,\n\t\"cardNumber\":\"1234 1234 1234 1234\",\n\t\"fullName\":\"Arya Stark\",\n\t\"endDate\":\"07/2019\",\n\t\"securityCode\": \"123\",\n\t\"isCreditCard\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:7000/cashin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "7000",
									"path": [
										"cashin"
									]
								},
								"description": "isCreditCard field is an Boolean, only can be filled with true or false."
							},
							"response": []
						},
						{
							"name": "[test] POST /cashin amount can't be negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e844fe5a-c1d1-41f9-be91-0aebee64708f",
										"exec": [
											"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var badRequestHandler = pm.response.json();",
											"    pm.expect(badRequestHandler.message).to.eql(\"Request body as CashInUserAdapter invalid - Amount can't be zero or negative.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"fromCVU\": \"806122948\",\n\t\"amount\" : -100.00,\n\t\"cardNumber\":\"1234 1234 1234 1234\",\n\t\"fullName\":\"Arya Stark\",\n\t\"endDate\":\"07/2019\",\n\t\"securityCode\": \"123\",\n\t\"isCreditCard\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:7000/cashin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "7000",
									"path": [
										"cashin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[test] POST /cashin endDate must be mm/yyyy format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e16677f-5f17-44e8-97fa-a027173cb62a",
										"exec": [
											"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var badRequestHandler = pm.response.json();",
											"    pm.expect(badRequestHandler.message).to.eql(\"Request body as CashInUserAdapter invalid - EndDate field only use numeric characters with format MM/yyyy.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"fromCVU\": \"806122948\",\n\t\"amount\" : 100.00,\n\t\"cardNumber\":\"1234 1234 1234 1234\",\n\t\"fullName\":\"Arya Stark\",\n\t\"endDate\":\"10/07/2019\",\n\t\"securityCode\": \"123\",\n\t\"isCreditCard\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:7000/cashin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "7000",
									"path": [
										"cashin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[test] POST /cashin securityCode must be numbers of 3 digits",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e16677f-5f17-44e8-97fa-a027173cb62a",
										"exec": [
											"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var badRequestHandler = pm.response.json();",
											"    pm.expect(badRequestHandler.message).to.eql(\"Request body as CashInUserAdapter invalid - SecurityCode field only use numeric characters of 3 digits.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"fromCVU\": \"806122948\",\n\t\"amount\" : 100.00,\n\t\"cardNumber\":\"1234 1234 1234 1234\",\n\t\"fullName\":\"Arya Stark\",\n\t\"endDate\":\"07/2019\",\n\t\"securityCode\": \"12f3\",\n\t\"isCreditCard\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:7000/cashin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "7000",
									"path": [
										"cashin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[test] POST /cashin fromCVU must be numbers of 9 digits",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e16677f-5f17-44e8-97fa-a027173cb62a",
										"exec": [
											"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var badRequestHandler = pm.response.json();",
											"    pm.expect(badRequestHandler.message).to.eql(\"Request body as CashInUserAdapter invalid - FromCVU field only use numeric characters of 9 digits.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"fromCVU\": \"812df29*48\",\n\t\"amount\" : 100.00,\n\t\"cardNumber\":\"1234 1234 1234 1234\",\n\t\"fullName\":\"Arya Stark\",\n\t\"endDate\":\"07/2019\",\n\t\"securityCode\": \"123\",\n\t\"isCreditCard\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:7000/cashin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "7000",
									"path": [
										"cashin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[test] POST /cashin cardNumber must follow a credit card number format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e16677f-5f17-44e8-97fa-a027173cb62a",
										"exec": [
											"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var badRequestHandler = pm.response.json();",
											"    pm.expect(badRequestHandler.message).to.eql(\"Request body as CashInUserAdapter invalid - CardNumber field only accepts a card number format (example:1234 1234 1234 1234).\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"fromCVU\": \"806122948\",\n\t\"amount\" : 100.00,\n\t\"cardNumber\":\"1231234sd12341234\",\n\t\"fullName\":\"Arya Stark\",\n\t\"endDate\":\"07/2019\",\n\t\"securityCode\": \"123\",\n\t\"isCreditCard\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:7000/cashin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "7000",
									"path": [
										"cashin"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"auth": {
				"type": "noauth"
			},
			"protocolProfileBehavior": {}
		},
		{
			"name": "GET /transactions/:cvu",
			"item": [
				{
					"name": "[test] GET /transactions/:cvu isn't composed by numbers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a0cf1ac-773e-4cc9-b90d-3eac0aa82b97",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"CVU isn't composed by numbers\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"The CVU must be composed by numbers of 9 digits.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:7000/transactions/8089ERGS0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"transactions",
								"8089ERGS0"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] GET /transactions/:cvu account doesn't exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a0cf1ac-773e-4cc9-b90d-3eac0aa82b97",
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"CVU doesn't exists\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Account 808997801 doesn't exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:7000/transactions/808997801",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"transactions",
								"808997801"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"protocolProfileBehavior": {}
		},
		{
			"name": "POST /login",
			"item": [
				{
					"name": "[test] POST /login \"email\" field must be filled with email format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a0cf1ac-773e-4cc9-b90d-3eac0aa82b97",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"email field without email format fails\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Request body as LoginUserAdapter invalid - Email field only use an email format (name_surname@email.com).\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"fan2j3n2fnak\",\n\t\"password\":\"arya123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] POST /login email or password wrong",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a0cf1ac-773e-4cc9-b90d-3eac0aa82b97",
								"exec": [
									"pm.test(\"Status code is 409 CONFLICT\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"email or password wrong\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Wrong email or password\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"arya_stark@outlook.com\",\n\t\"password\":\"arya987\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] POST /login email can't be blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a0cf1ac-773e-4cc9-b90d-3eac0aa82b97",
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"email field can't be blank\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Request body as LoginUserAdapter invalid - Email field can't be blank.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"\",\n\t\"password\":\"arya987\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] POST /login password can't be blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a0cf1ac-773e-4cc9-b90d-3eac0aa82b97",
								"exec": [
									"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"email field can't be blank\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Request body as LoginUserAdapter invalid - Password field can't be blank.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"arya_stark@outlook.com\",\n\t\"password\":\"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "POST /transfer",
			"item": [
				{
					"name": "[test] POST /transfer fromCVU must be numbers of 9 digits",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f248a166-c780-4ed6-83c4-ef4ddd6545c9",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"fromCVU must be numbers of 9 digits\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Request body as TransferAdapter invalid - FromCVU field only use numeric characters of 9 digits.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"fromCVU\":\"122948\",\r\n\t\"toCVU\":\"060065243\",\r\n\t\"amount\":\"100.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/transfer",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] POST /transfer toCVU must be numbers of 9 digits",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0987a26b-fdbf-41bf-91c8-fd0a1fbdf50f",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"toCVU must be numbers of 9 digits\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Request body as TransferAdapter invalid - toCVU field only use numeric characters of 9 digits.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"fromCVU\":\"806122948\",\r\n\t\"toCVU\":\"/60sdfa243\",\r\n\t\"amount\":\"100.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/transfer",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] POST /transfer amount can't be zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0987a26b-fdbf-41bf-91c8-fd0a1fbdf50f",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"email field without email format fails\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Request body as TransferAdapter invalid - Amount can't be zero or negative.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"fromCVU\":\"806122948\",\r\n\t\"toCVU\":\"060065243\",\r\n\t\"amount\":\"0.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/transfer",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] POST /transfer amount can't be negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0987a26b-fdbf-41bf-91c8-fd0a1fbdf50f",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"email field without email format fails\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Request body as TransferAdapter invalid - Amount can't be zero or negative.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"fromCVU\":\"806122948\",\r\n\t\"toCVU\":\"060065243\",\r\n\t\"amount\":\"-100.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/transfer",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] POST /transfer fromCVU can't be an blocked account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35e04984-6445-475d-a77d-96b3865d978d",
								"exec": [
									"pm.test(\"Status code is 404 NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"fromCVU can't be an blocked account\", function () {",
									"    const badRequestHandler = pm.response.json();",
									"    pm.expect(badRequestHandler.message).to.eql(\"Account 806122948 doesn't exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"fromCVU\":\"806122948\",\r\n\t\"toCVU\":\"060065243\",\r\n\t\"amount\":\"100.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/transfer",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] POST /transfer toCVU can't be an blocked account Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35e04984-6445-475d-a77d-96b3865d978d",
								"exec": [
									"pm.test(\"Status code is 404 NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"toCVU can't be an blocked account\", function () {",
									"    const badRequestHandler = pm.response.json();",
									"    pm.expect(badRequestHandler.message).to.eql(\"Account 806122948 doesn't exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"fromCVU\":\"806122948\",\r\n\t\"toCVU\":\"060065243\",\r\n\t\"amount\":\"100.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/transfer",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"transfer"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "DELETE /users/:cvu",
			"item": [
				{
					"name": "[test] DELETE /users/:cvu cvu must be numbers of 9 digits",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc669af4-621d-4f3e-b1be-ceb2888a8fee",
								"exec": [
									"pm.test(\"Status code is 404 NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"CVU must be numbers of 9 digits\", function () {",
									"    var BadRequestHandler = pm.response.json();",
									"    pm.expect(BadRequestHandler.message).to.eql(\"The CVU must be composed by numbers of 9 digits.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:7000/users/802fA92.48",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"users",
								"802fA92.48"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] DELETE /users/:cvu CVU have to exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc669af4-621d-4f3e-b1be-ceb2888a8fee",
								"exec": [
									"pm.test(\"Status code is 404 NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"CVU have to exists\", function () {",
									"    var BadRequestHandler = pm.response.json();",
									"    pm.expect(BadRequestHandler.message).to.eql(\"Account 061165233 doesn't exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:7000/users/061165233",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"users",
								"061165233"
							]
						},
						"description": "Account must be an amount of 0.00 to be deleted."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "GET /account/:cvu",
			"item": [
				{
					"name": "[test] GET /account/:cvu have to exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380ed5b4-b0e9-4f59-9e10-26e4ffcc7059",
								"exec": [
									"pm.test(\"Status code is 404 NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"CVU have to exists\", function () {",
									"    var BadRequestHandler = pm.response.json();",
									"    pm.expect(BadRequestHandler.message).to.eql(\"Account 806122948 doesn't exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:7000/account/806122948",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"account",
								"806122948"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "POST /loyalty",
			"item": [
				{
					"name": "[test] /loyalty must input all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15ab9415-2cd9-4ee2-9333-8c1f327fc37f",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"must input all fields\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Must input all fields from Loyalty: name, strategyName, strategyValue, minNumberOfTransactions, minAmountPerTransaction, validFrom and validTo.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n\t\"strategyName\": \"Discount\",\n\t\"strategyValue\": 40.00,\n\t\"minNumberOfTransactions\": 4,\n    \"minAmountPerTransaction\": 2000.00,\n    \"validFrom\": \"2019-12-12\",\n    \"validTo\": \"2030-12-13\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/loyalty",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"loyalty"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] /loyalty all fields can't be blank.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15ab9415-2cd9-4ee2-9333-8c1f327fc37f",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"must input all fields\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Request body as StoreLoyaltyAdapter invalid - StrategyName field can't be blank.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"asd\",\n\t\"strategyName\": \"\",\n\t\"strategyValue\": 40.00,\n\t\"minNumberOfTransactions\": 4,\n    \"minAmountPerTransaction\": 2000.00,\n    \"validFrom\": \"2019-12-12\",\n    \"validTo\": \"2030-12-13\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/loyalty",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"loyalty"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] /loyalty validFrom can't be before than today",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15ab9415-2cd9-4ee2-9333-8c1f327fc37f",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"must input all fields\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Request body as StoreLoyaltyAdapter invalid - ValidFrom must be after than today.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5150e312-bfb2-4cd9-892f-b88e21ae33f8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Descuento del 40%\",\n\t\"strategyName\": \"Discount\",\n\t\"strategyValue\": 40.00,\n\t\"minNumberOfTransactions\": 4,\n    \"minAmountPerTransaction\": 2000.00,\n    \"validFrom\": \"2019-10-12\",\n    \"validTo\": \"2030-12-13\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/loyalty",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"loyalty"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] /loyalty validTo can't be before than validFrom.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15ab9415-2cd9-4ee2-9333-8c1f327fc37f",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"must input all fields\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Request body as StoreLoyaltyAdapter invalid - ValidFrom must be before than ValidTo.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5150e312-bfb2-4cd9-892f-b88e21ae33f8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Descuento del 40%\",\n\t\"strategyName\": \"Discount\",\n\t\"strategyValue\": 40.00,\n\t\"minNumberOfTransactions\": 4,\n    \"minAmountPerTransaction\": 2000.00,\n    \"validFrom\": \"2030-12-12\",\n    \"validTo\": \"2030-12-11\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/loyalty",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"loyalty"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] /loyalty strategy value can't be minor or equal than zero.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15ab9415-2cd9-4ee2-9333-8c1f327fc37f",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"must input all fields\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Request body as StoreLoyaltyAdapter invalid - Strategy Value must be bigger than zero.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5150e312-bfb2-4cd9-892f-b88e21ae33f8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Descuento del 40%\",\n\t\"strategyName\": \"Discount\",\n\t\"strategyValue\": 0.00,\n\t\"minNumberOfTransactions\": 4,\n    \"minAmountPerTransaction\": 2000.00,\n    \"validFrom\": \"2030-12-12\",\n    \"validTo\": \"2030-12-13\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/loyalty",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"loyalty"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] /loyalty min amount can't be minor or equal than zero.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15ab9415-2cd9-4ee2-9333-8c1f327fc37f",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"must input all fields\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Request body as StoreLoyaltyAdapter invalid - Min amount per Transaction must be bigger than $0.00.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5150e312-bfb2-4cd9-892f-b88e21ae33f8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Descuento del 40%\",\n\t\"strategyName\": \"Discount\",\n\t\"strategyValue\": 40.00,\n\t\"minNumberOfTransactions\": 4,\n    \"minAmountPerTransaction\": 0.00,\n    \"validFrom\": \"2030-12-12\",\n    \"validTo\": \"2030-12-13\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/loyalty",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"loyalty"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] /loyalty min transactions can't be minor or equal than zero.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15ab9415-2cd9-4ee2-9333-8c1f327fc37f",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"must input all fields\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Request body as StoreLoyaltyAdapter invalid - Min number of transactions must be bigger than zero.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5150e312-bfb2-4cd9-892f-b88e21ae33f8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Descuento del 40%\",\n\t\"strategyName\": \"Discount\",\n\t\"strategyValue\": 40.00,\n\t\"minNumberOfTransactions\": 0,\n    \"minAmountPerTransaction\": 40,\n    \"validFrom\": \"2030-12-12\",\n    \"validTo\": \"2030-12-13\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/loyalty",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"loyalty"
							]
						}
					},
					"response": []
				},
				{
					"name": "[test] /loyalty max discount percent can't be bigger than 100%.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15ab9415-2cd9-4ee2-9333-8c1f327fc37f",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"must input all fields\", function () {",
									"    var handler = pm.response.json();",
									"    pm.expect(handler.message).to.eql(\"Request body as StoreLoyaltyAdapter invalid - An discount must be minor or equal than 100%.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5150e312-bfb2-4cd9-892f-b88e21ae33f8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Descuento del 40%\",\n\t\"strategyName\": \"Discount\",\n\t\"strategyValue\": 100.01,\n\t\"minNumberOfTransactions\": 4,\n    \"minAmountPerTransaction\": 40,\n    \"validFrom\": \"2030-12-12\",\n    \"validTo\": \"2030-12-13\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7000/loyalty",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7000",
							"path": [
								"loyalty"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}